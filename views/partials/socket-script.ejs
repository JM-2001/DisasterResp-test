<% if (loggedIn) { %>
<meta name="user-id" content="<%= user_id %>" />
<% } %>
<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  let browserLocation = null;

  // Function to check if user is in affected area
  function isUserInZone(userLat, userLng, zoneLat, zoneLng, radiusMiles) {
    console.log("Checking zone:", {
      user: { lat: userLat, lng: userLng },
      zone: { lat: zoneLat, lng: zoneLng },
      radius: radiusMiles,
    });

    const R = 3958.8;
    const rlat1 = userLat * (Math.PI / 180);
    const rlat2 = zoneLat * (Math.PI / 180);
    const difflat = rlat2 - rlat1;
    const difflon = (zoneLng - userLng) * (Math.PI / 180);

    const d =
      2 *
      R *
      Math.asin(
        Math.sqrt(
          Math.sin(difflat / 2) * Math.sin(difflat / 2) +
            Math.cos(rlat1) *
              Math.cos(rlat2) *
              Math.sin(difflon / 2) *
              Math.sin(difflon / 2)
        )
      );

    const isInZone = d <= radiusMiles;
    console.log(`Distance: ${d} miles, In Zone: ${isInZone}`);
    return isInZone;
  }

  // Function to get browser location
  function getBrowserLocation() {
    return new Promise((resolve, reject) => {
      if (!navigator.geolocation) {
        reject(new Error("Geolocation not supported"));
        return;
      }

      navigator.geolocation.getCurrentPosition(
        (position) => {
          const location = {
            Latitude: position.coords.latitude,
            Longitude: position.coords.longitude,
          };
          console.log("Browser location obtained:", location);
          browserLocation = location;
          resolve(location);
        },
        (error) => {
          console.error("Error getting browser location:", error);
          reject(error);
        }
      );
    });
  }

  // Function to get stored user location for logged-in users
  async function getStoredLocation() {
    const userIdMeta = document.querySelector('meta[name="user-id"]');
    if (!userIdMeta) {
      console.log("No user ID found - user not logged in");
      return null;
    }

    try {
      const response = await fetch(`/users/location/${userIdMeta.content}`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      console.log("Retrieved stored location data:", data);
      return data;
    } catch (error) {
      console.error("Error fetching stored location:", error);
      return null;
    }
  }

  // Setup alerts with location
  function setupAlerts(latitude, longitude) {
    console.log("Setting up alerts for location:", { latitude, longitude });

    // Remove existing listeners to prevent duplicates
    socket.off("disaster-alert");

    // Add new listener
    socket.on("disaster-alert", (notification) => {
      console.log("Received alert notification:", notification);

      const isInZone = isUserInZone(
        parseFloat(latitude),
        parseFloat(longitude),
        parseFloat(notification.zoneLat),
        parseFloat(notification.zoneLng),
        parseFloat(notification.zoneRadius)
      );

      console.log(`User in zone ${notification.zoneName}: ${isInZone}`);

      if (isInZone) {
        alert(
          `Disaster Alert for ${notification.zoneName}: ${notification.message}`
        );
      }
    });
  }

  // Initialize alerts system
  async function initialize() {
    console.log("Initializing alerts system...");
    try {
      // Try to get stored location for logged-in users first
      const locationData = await getStoredLocation();

      if (locationData && locationData.Latitude && locationData.Longitude) {
        console.log("Using stored location for logged-in user");
        setupAlerts(locationData.Latitude, locationData.Longitude);
      } else {
        // If no stored location (user not logged in), try browser location
        console.log("No stored location, attempting to get browser location");
        try {
          const browserLoc = await getBrowserLocation();
          if (browserLoc) {
            console.log("Using browser location for non-logged-in user");
            setupAlerts(browserLoc.Latitude, browserLoc.Longitude);
          }
        } catch (error) {
          console.error("Could not get browser location:", error);
        }
      }
    } catch (error) {
      console.error("Error during initialization:", error);
    }
  }

  // Socket connection handling
  socket.on("connect", () => {
    console.log("Socket connected - initializing alerts");
    initialize();
  });

  socket.on("disconnect", () => {
    console.log("Socket disconnected");
  });

  // Initial setup
  initialize();

  // Periodically update browser location for non-logged-in users
  if (!document.querySelector('meta[name="user-id"]')) {
    setInterval(async () => {
      try {
        const newLocation = await getBrowserLocation();
        if (newLocation) {
          setupAlerts(newLocation.Latitude, newLocation.Longitude);
        }
      } catch (error) {
        console.error("Error updating browser location:", error);
      }
    }, 5 * 60 * 1000); // Update every 5 minutes
  }
</script>
